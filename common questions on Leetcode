### My solution to some SQL common query problems on Leetcode. 
### Doudou Zhang


## Common Join Questions
# Question 175, combine two tables
# my solution
Select FirstName, LastName, City, State
From Person Left Join Address
On Address.PersonId = Person.PersonId;

# Question 181, Employees Earning More Than Their Managers¶
# my solution: a typical self join question
Select a.Name
From Employee a JOIN Employee b
ON a.ManagerId = b.Id
Where a.Salary > b.Salary;

#Question 183, Customers Who Never Order
# my solution
Select C.Name As Customers
From Customers C left Join Orders O
On C.Id = O.CustomerId
Where O.CustomerId is null;

#184. Department Highest Salary
# my solution
Select D.Name AS Department, T.Name AS Employee, T.Salary AS Salary
From Department D, 
    (
    Select Name, Salary, E.DepartmentId from Employee E JOIN (
    Select DepartmentId, Max(Salary) AS MaxSalary From Employee
    Group by DepartmentId) tmp
    ON E.DepartmentId = tmp.DepartmentId
    Where E.Salary = tmp.MaxSalary
    ) AS T
Where D.Id = T.DepartmentId;

## Common Rank Questions

#176. Second Highest Salary¶
# my solution
Select Max(Salary) AS SecondHighestSalary
From Employee
Where Salary < (Select Max(Salary) From Employee);

#177. Nth Highest Salary
# my solution
Select Distinct Salary From (
    Select Id, Salary,
        @rank := if(@preSalary = Salary, @rank, @rank+1) AS Rank,
        @preSalary := Salary AS preSalary
    From Employee, (Select @rank:=0, @preSalary:=-1) var
    Order by Salary DESC
    ) tmp
Where Rank=N;

#178. Rank Scores
# my solution 
Select Score, Rank From (
    Select Id, Score,
        @rank := if(@preScore = Score, @rank, @rank+1) AS Rank,
        @preScore := Score AS preScore
    From Scores, (Select @rank:=0, @preScore:=-1) var
    Order by Score DESC
    ) tmp;
    
 #180. Consecutive Numbers
 # my solution
 Select Distinct Num As ConsecutiveNums From (
    Select Id, Num, 
        @count := If(@preNum = Num, @count+1, 1) AS Count,
        @preNum := Num AS preNum
    From Logs, (Select @preNum:=NULL, @count:=1) var 
    ) tmp
Where Count >=3;

#185. Department Top Three Salaries
# my solution
Select D.Name AS Department, T.Name AS Employee, T.Salary
From 
(
Select DepartmentId, Name, Salary,
    (CASE WHEN @id=DepartmentId THEN @rank:= IF(@preSalary = Salary, @rank, @rank+1)
         ELSE @rank:= 1
    END) AS Rank,
    @preSalary:= Salary AS preSalary,
    @id:= DepartmentId AS preId
From Employee, (Select @rank:=0, @preSalary:=-1, @id:=NULL) var
Order by DepartmentId, Salary DESC
) T JOIN Department D
ON T.DepartmentId = D.Id
Where T.Rank <=3;

#197. Rising Temperature
# my solution
Select Id From (
Select Id, Date, Temperature,
    @Higher := If(Temperature > @preTemp, 'Yes', 'No') AS Higher,
    @DateContinuous := If(Datediff(Date, @preDate) = 1, 'Yes', 'No') AS DateContinuous,
    @preTemp := Temperature AS preTemp,
    @preDate := Date
From Weather, (Select @preTemp:=NULL, @Higher:=NULL, @preDate:=NULL) var
Order by Date
) tmp
Where Higher = 'Yes' AND DateContinuous = 'Yes';

## Other SQL problems

#182. Duplicate Emails
# my solution
Select Email From Person
Group by Email
Having count(*) > 1;

#196. Delete Duplicate Emails
# my solution
/* retain the unique emails*/
Select Min(Id) AS minId, Email From Person
Group by Email

/* delete the emails which don't appear in the unique emails*/
Delete From Person
Where Id not in (
    Select minId From (
        Select min(Id) AS minId, Email
        From Person
        Group by Email
    ) AS tmp
);

#262. Trips and Users¶
# my solution
Select T.Request_at AS Day, Round(Sum(If(Status='cancelled_by_driver',1,0))/count(*), 2) AS 'Cancellation Rate'
From Trips T JOIN Users U
ON T.Client_Id = U.Users_Id
Where Banned='No' And Role='client' And Request_at Between '2013-10-01' and '2013-10-03'
Group by Request_at
Order by Request_at;
