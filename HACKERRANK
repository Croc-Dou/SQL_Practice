#1.Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
#my solution

SELECT DISTINCT CITY FROM STATION
WHERE CITY REGEXP "[aeiou]$";

#2. Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
#my solution
SELECT DISTINCT CITY FROM STATION 
WHERE CITY REGEXP '^[aeiou]' AND CITY REGEXP '[aeiou]$';

#3.Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
#my solution

SELECT DISTINCT CITY FROM STATION
WHERE CITY REGEXP '^[^aeiou]';

Note: Putting a ^ inside the closed bracket means something completely different than putting it outside the brackets. 
Putting it inside the brackets makes it match all characters EXCEPT the ones inside the bracket.

#4. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
#my solution

SELECT DISTINCT CITY FROM STATION
WHERE CITY REGEXP '[^aeiou]$';

#5. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
#my solution

SELECT DISTINCT CITY FROM STATION
WHERE CITY REGEXP '^[^aeiou]|[^aeiou]$';

#6.Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
#my solution
SELECT DISTINCT CITY FROM STATION
WHERE CITY REGEXP '^[^aeiou]' AND CITY REGEXP '[^aeiou]$';

#7. Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
#my solution

SELECT NAME FROM STUDENTS WHERE MARKS > 75 ORDER BY RIGHT(NAME, 3), ID ASC;

#8. Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

#my solution

SELECT CASE 
        WHEN A + B <= C OR A+C <= B OR B + C <= A Then "Not A Triangle"
        WHEN A = B AND B = C THEN "Equilateral"
        WHEN A = B OR B = C OR A = C THEN "Isosceles"
        ELSE "Scalene"
    END 
    FROM TRIANGLES;



